/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package edu.neu.csye6200.views;

import java.sql.ResultSet;
import edu.neu.csye6200.DB;
import edu.neu.csye6200.controllers.StudentController;
import java.sql.Date;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author dubey
 */
public class StudentUpdateDelete extends javax.swing.JFrame {

    /**
     * Creates new form StudentUpdateDelete
     */
    public StudentUpdateDelete() throws SQLException {
        initComponents();
        tableShow();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        emailLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        studentTable = new javax.swing.JTable();
        emailIdText = new javax.swing.JTextField();
        Update = new javax.swing.JButton();
        studentNameLabel = new javax.swing.JLabel();
        studentNameText = new javax.swing.JTextField();
        gpaLabel = new javax.swing.JLabel();
        gpaText = new javax.swing.JTextField();
        Back = new javax.swing.JButton();
        parentNameLabel = new javax.swing.JLabel();
        parentNameText = new javax.swing.JTextField();
        parentAddressLabel = new javax.swing.JLabel();
        parentAddressText = new javax.swing.JTextField();
        phoneLabel = new javax.swing.JLabel();
        parentPhoneNumText = new javax.swing.JTextField();
        dobLabel = new javax.swing.JLabel();
        dobText = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(1680, 700));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        emailLabel.setFont(new java.awt.Font("Arial", 1, 10)); // NOI18N
        emailLabel.setForeground(new java.awt.Color(255, 255, 255));
        emailLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        emailLabel.setText("EMAIL ID");
        getContentPane().add(emailLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 79, 201, -1));

        studentTable.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        studentTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "STUDENT ID", "EMAIL ID", "STUDENT NAME", "AGE (Months)", "DATE OF BIRTH", "GPA", "CLASS ID", "PARENT ID", "PARENT NAME", "ADDRESS", "PHONE NUMBER"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Object.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        studentTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                studentTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(studentTable);
        if (studentTable.getColumnModel().getColumnCount() > 0) {
            studentTable.getColumnModel().getColumn(0).setResizable(false);
            studentTable.getColumnModel().getColumn(0).setPreferredWidth(55);
            studentTable.getColumnModel().getColumn(1).setResizable(false);
            studentTable.getColumnModel().getColumn(2).setResizable(false);
            studentTable.getColumnModel().getColumn(2).setPreferredWidth(120);
            studentTable.getColumnModel().getColumn(3).setResizable(false);
            studentTable.getColumnModel().getColumn(3).setPreferredWidth(20);
            studentTable.getColumnModel().getColumn(4).setResizable(false);
            studentTable.getColumnModel().getColumn(5).setResizable(false);
            studentTable.getColumnModel().getColumn(5).setPreferredWidth(25);
            studentTable.getColumnModel().getColumn(6).setResizable(false);
            studentTable.getColumnModel().getColumn(7).setResizable(false);
            studentTable.getColumnModel().getColumn(7).setPreferredWidth(40);
            studentTable.getColumnModel().getColumn(8).setResizable(false);
            studentTable.getColumnModel().getColumn(9).setResizable(false);
            studentTable.getColumnModel().getColumn(10).setResizable(false);
        }

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 70, 950, 561));

        emailIdText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                emailIdTextActionPerformed(evt);
            }
        });
        getContentPane().add(emailIdText, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 103, 201, -1));

        Update.setText("Update");
        Update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdateActionPerformed(evt);
            }
        });
        getContentPane().add(Update, new org.netbeans.lib.awtextra.AbsoluteConstraints(69, 574, -1, -1));

        studentNameLabel.setFont(new java.awt.Font("Arial", 1, 10)); // NOI18N
        studentNameLabel.setForeground(new java.awt.Color(255, 255, 255));
        studentNameLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        studentNameLabel.setText("STUDENT NAME");
        getContentPane().add(studentNameLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 141, 201, -1));

        studentNameText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                studentNameTextActionPerformed(evt);
            }
        });
        getContentPane().add(studentNameText, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 165, 201, -1));

        gpaLabel.setFont(new java.awt.Font("Arial", 1, 10)); // NOI18N
        gpaLabel.setForeground(new java.awt.Color(255, 255, 255));
        gpaLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        gpaLabel.setText("GPA");
        getContentPane().add(gpaLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 265, 201, -1));

        gpaText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gpaTextActionPerformed(evt);
            }
        });
        getContentPane().add(gpaText, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 289, 201, -1));

        Back.setText("Back");
        Back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BackActionPerformed(evt);
            }
        });
        getContentPane().add(Back, new org.netbeans.lib.awtextra.AbsoluteConstraints(1170, 30, -1, -1));

        parentNameLabel.setFont(new java.awt.Font("Arial", 1, 10)); // NOI18N
        parentNameLabel.setForeground(new java.awt.Color(255, 255, 255));
        parentNameLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        parentNameLabel.setText("PARENT NAME");
        getContentPane().add(parentNameLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 327, 201, -1));

        parentNameText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                parentNameTextActionPerformed(evt);
            }
        });
        getContentPane().add(parentNameText, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 351, 201, -1));

        parentAddressLabel.setFont(new java.awt.Font("Arial", 1, 10)); // NOI18N
        parentAddressLabel.setForeground(new java.awt.Color(255, 255, 255));
        parentAddressLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        parentAddressLabel.setText("PARENT'S ADDRESS");
        getContentPane().add(parentAddressLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 389, 201, -1));

        parentAddressText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                parentAddressTextActionPerformed(evt);
            }
        });
        getContentPane().add(parentAddressText, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 413, 201, 56));

        phoneLabel.setFont(new java.awt.Font("Arial", 1, 10)); // NOI18N
        phoneLabel.setForeground(new java.awt.Color(255, 255, 255));
        phoneLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        phoneLabel.setText("PARENT'S PHONE NUMBER");
        getContentPane().add(phoneLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 487, 211, -1));

        parentPhoneNumText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                parentPhoneNumTextActionPerformed(evt);
            }
        });
        getContentPane().add(parentPhoneNumText, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 511, 201, -1));

        dobLabel.setFont(new java.awt.Font("Arial", 1, 10)); // NOI18N
        dobLabel.setForeground(new java.awt.Color(255, 255, 255));
        dobLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        dobLabel.setText("DATE OF BIRTH");
        getContentPane().add(dobLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 203, 201, -1));

        dobText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dobTextActionPerformed(evt);
            }
        });
        getContentPane().add(dobText, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 227, 201, -1));

        jLabel1.setFont(new java.awt.Font("Arial", 3, 14)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("STUDENT UPDATE/VIEW");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 1260, -1));

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setIcon(new javax.swing.ImageIcon("C:\\Users\\dubey\\Downloads\\ood_project-main (1)\\ood_project-latest\\src\\Assets\\stback1.jpg")); // NOI18N
        jLabel2.setMaximumSize(new java.awt.Dimension(1680, 750));
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(-5, -6, 1290, 680));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void emailIdTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_emailIdTextActionPerformed
        // TODO add your handling code here:
        studentId = Integer.parseInt(emailIdText.getText());

    }//GEN-LAST:event_emailIdTextActionPerformed

    private void parentAddressTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_parentAddressTextActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_parentAddressTextActionPerformed

    private void BackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BackActionPerformed
        this.toBack();

        MainFrame mf = new MainFrame();
        mf.setVisible(true);
        mf.toFront();
        this.setVisible(false);
    }//GEN-LAST:event_BackActionPerformed

    private void parentPhoneNumTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_parentPhoneNumTextActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_parentPhoneNumTextActionPerformed

    private void UpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdateActionPerformed
        // TODO add your handling code here:
        
        int selectedRow = studentTable.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row to update.");
            return;
        }
        try {
            if (studentNameText.getText().isEmpty() || emailIdText.getText().isEmpty() || dobText.getText().isEmpty() || parentPhoneNumText.getText().isEmpty()
                    || parentNameText.getText().isEmpty() || gpaText.getText().isEmpty() || parentAddressText.getText().isEmpty()) {
                JOptionPane.showMessageDialog(null, "Fields cannot be left empty");
                return;
            }

            String studentName = studentNameText.getText();
            String parentName = parentNameText.getText();

            boolean flag;

            flag = studentName.matches("^[a-zA-Z '-]+$");

            if (flag == false) {
                JOptionPane.showMessageDialog(null, "Student name cannot have integer values");
                return;
            }

            flag = parentName.matches("^[a-zA-Z '-]+$");

            if (!flag) {
                JOptionPane.showMessageDialog(null, "Parent name cannot have integer values");
                return;
            }


            String email = emailIdText.getText();

            flag = email.matches("^[a-zA-Z0-9._-]+@[a-zA-Z0-9]+.[a-zA-Z]+$");

            if (!flag) {
                JOptionPane.showMessageDialog(null, "Email must be in format of example@domain.com");
                return;
            }
            Statement stmt = DB.getObj().conn.createStatement();
            ResultSet rs;
            if (!storedEmail.equals(email)) {

                rs = stmt.executeQuery("Select * From student");
                while (rs.next()) {
                    if (rs.getObject("email").equals(email)) {
                        JOptionPane.showMessageDialog(null, "Email already exists");
                        return;
                    }
                }
            }

            String phoneNumber = parentPhoneNumText.getText();

            if (phoneNumber.length() != 10) {
                JOptionPane.showMessageDialog(null, "Phone Number must be of 10 digits");
                return;
            }
            flag = phoneNumber.matches("^[0-9]+$");
            if (!flag) {
                JOptionPane.showMessageDialog(null, "Phone Number must have digits only");
                return;
            }
            if (!storedPhone.equals(phoneNumber)) {
                rs = stmt.executeQuery("Select * From parent");
                while (rs.next()) {
                    if (rs.getObject("phone").equals(phoneNumber)) {
                        JOptionPane.showMessageDialog(null, "Phone Number already exists");
                        return;
                    }
                }
            }

            Date dobFromString = null;
            try {
                dobFromString = java.sql.Date.valueOf(dobText.getText());
            } catch (IllegalArgumentException e1) {
                System.out.println(e1.getMessage());
            }

            if (dobFromString == null) {
                JOptionPane.showMessageDialog(null, "DOB must be in format of yyyy-mm-dd");
                return;
            }

            flag = gpaText.getText().matches("^[0-9.]+$");
            if (!flag) {
                JOptionPane.showMessageDialog(null, "GPA must have digits only");
                return;
            }
            Double gpa = Double.parseDouble(gpaText.getText());
            if (gpa > 4.0) {
                JOptionPane.showMessageDialog(null, "GPA can not be greater than 4");
                return;
            }

            StudentController std = new StudentController();
            std.updateStudentAndParent(studentId, studentName, dobFromString, gpa,
                    parentId, parentName, parentAddressText.getText(), phoneNumber, email);
            JOptionPane.showMessageDialog(null, "Student data has been updated.");
            tableShow();
        } catch (Exception e) {
            System.out.println(e.getMessage());
        }

    }//GEN-LAST:event_UpdateActionPerformed

    private void studentNameTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_studentNameTextActionPerformed
        // TODO add your handling code here:


    }//GEN-LAST:event_studentNameTextActionPerformed

    private void gpaTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gpaTextActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_gpaTextActionPerformed

    private void dobTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dobTextActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_dobTextActionPerformed

    private void parentNameTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_parentNameTextActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_parentNameTextActionPerformed

    private void studentTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_studentTableMouseClicked
        // TODO add your handling code here:
        DefaultTableModel df = (DefaultTableModel) studentTable.getModel();
        int selectedRow = studentTable.getSelectedRow();

        studentId = Integer.parseInt((String) df.getValueAt(selectedRow, 0));
        parentId = Integer.parseInt((String) df.getValueAt(selectedRow, 7));
        storedEmail = (String) df.getValueAt(selectedRow, 1);
        storedPhone = (String) df.getValueAt(selectedRow, 10);

        emailIdText.setText(df.getValueAt(selectedRow, 1).toString());
        studentNameText.setText(df.getValueAt(selectedRow, 2).toString());
        dobText.setText(df.getValueAt(selectedRow, 4).toString());
        String gpa = "";
        if (df.getValueAt(selectedRow, 5) != null) {
            gpa = df.getValueAt(selectedRow, 5).toString();
        }
        gpaText.setText(gpa);
        parentNameText.setText(df.getValueAt(selectedRow, 8).toString());
        parentAddressText.setText(df.getValueAt(selectedRow, 9).toString());
        parentPhoneNumText.setText(df.getValueAt(selectedRow, 10).toString());


    }//GEN-LAST:event_studentTableMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(StudentUpdateDelete.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(StudentUpdateDelete.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(StudentUpdateDelete.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(StudentUpdateDelete.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new StudentUpdateDelete().setVisible(true);
                } catch (SQLException ex) {
                    Logger.getLogger(StudentUpdateDelete.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    public void tableShow() throws SQLException {
        DB db = DB.getObj();
        DefaultTableModel df = (DefaultTableModel) studentTable.getModel();
        df.setRowCount(0);
        ResultSet rs = db.query("SELECT s.email,s.class_id,s.student_id,s.name,s.age,s.dob,s.gpa,s.parent_id,p.p_name,p.address,p.phone "
                + " FROM student s,parent p WHERE s.parent_id=p.parent_id order by s.student_id ;");
        ResultSetMetaData rss = rs.getMetaData();
        int c = rss.getColumnCount();
        while (rs.next()) {
            Vector v = new Vector();
            for (int a = 1; a <= c; a++) {
                v.add(rs.getString("student_id"));
                v.add(rs.getString("email"));
                v.add(rs.getString("name"));
                v.add(rs.getString("age"));
                v.add(rs.getString("dob"));
                v.add(rs.getString("gpa"));
                v.add(rs.getString("class_id"));
                v.add(rs.getString("parent_id"));
                v.add(rs.getString("p_name"));
                v.add(rs.getString("address"));
                v.add(rs.getString("phone"));
            }
            df.addRow(v);
        }
    }

    int studentId;
    int parentId;
    String storedEmail;
    String storedPhone;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Back;
    private javax.swing.JButton Update;
    private javax.swing.JLabel dobLabel;
    private javax.swing.JTextField dobText;
    private javax.swing.JTextField emailIdText;
    private javax.swing.JLabel emailLabel;
    private javax.swing.JLabel gpaLabel;
    private javax.swing.JTextField gpaText;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel parentAddressLabel;
    private javax.swing.JTextField parentAddressText;
    private javax.swing.JLabel parentNameLabel;
    private javax.swing.JTextField parentNameText;
    private javax.swing.JTextField parentPhoneNumText;
    private javax.swing.JLabel phoneLabel;
    private javax.swing.JLabel studentNameLabel;
    private javax.swing.JTextField studentNameText;
    private javax.swing.JTable studentTable;
    // End of variables declaration//GEN-END:variables
}
